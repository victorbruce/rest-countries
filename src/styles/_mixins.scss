@use "variables" as *;
@use "sass:list";
@use "sass:meta";

@mixin theme-transition($properties: all, $duration: 0.2s) {
  @if meta.type-of($properties) == "list" {
    transition: #{list.join($properties, ", ")} #{$duration} ease-in-out;
  } @else {
    transition: #{$properties} #{$duration} ease-in-out;
  }
}

@mixin surface-style($elevated: false) {
  background-color: if(
    $elevated,
    var(--color-surface-elevated),
    var(--color-surface)
  );
  border: 1px solid var(--color-border);
  border-radius: 8px;
  @include theme-transition(background-color, border-color);
}

// button variant
@mixin button-variant($variant: primary) {
  @if $variant == primary {
    background-color: var(--color-primary);
    color: white;
    border: 1px solid var(--color-primary);

    &:hover:not(:disabled) {
      background-color: var(--color-primary-hover);
      border-color: var(--color-primary-hover);
    }

    &:active:not(:disabled) {
      background-color: var(--color-primary-active, var(--color-primary-hover));
    }
  } @else if $variant == secondary {
    background-color: var(--color-background);
    color: var(--color-text-primary);
    border: 1px solid var(--color-border);

    &:hover:not(:disabled) {
      background-color: var(--color-hover);
      border-color: var(--color-border-hover, var(--color-border));
    }

    &:active:not(:disabled) {
      background-color: var(--color-active);
    }
  } @else if $variant == border {
    background-color: transparent;
    color: var(--color-text-primary);
    border: 1px solid var(--color-border);

    &:hover:not(:disabled) {
      background-color: var(--color-hover);
      border-color: var(--color-border-hover, var(--color-border));
    }

    &:active:not(:disabled) {
      background-color: var(--color-active);
    }
  } @else if $variant == ghost {
    background-color: transparent;
    color: var(--color-text-primary);
    border: 1px solid transparent;

    &:hover:not(:disabled) {
      background-color: var(--color-hover);
    }

    &:active:not(:disabled) {
      background-color: var(--color-active);
    }
  }

  @include theme-transition((background-color, border-color, color));

  &:focus {
    outline: 2px solid var(--color-focus);
    outline-offset: 2px;
  }
}

// button size
@mixin button-size($size: medium) {
  @if $size == small {
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    gap: 0.375rem;
  } @else if $size == medium {
    padding: 0.875rem 1rem;
    gap: 0.5rem;
  } @else if $size == large {
    padding: 1rem 1.5rem;
    font-size: 1.125rem;
    gap: 0.625rem;
  } @else if $size == full {
    width: 100%;
    padding: 0.875rem 1rem;
    gap: 0.5rem;
  }
}

// Typography Presets
@mixin TextPreset1 {
  font-size: 24px;
  line-height: 120%;
  letter-spacing: -0.5px;
  font-family: $font-family-primary;
  font-weight: 700;
}

@mixin TextPreset2 {
  font-size: 20px;
  line-height: 120%;
  letter-spacing: -0.5px;
  font-family: $font-family-primary;
  font-weight: 700;
}

@mixin TextPreset3 {
  font-size: 16px;
  line-height: 120%;
  letter-spacing: -0.3px;
  font-family: $font-family-primary;
  font-weight: 600;
}

@mixin TextPreset4 {
  font-size: 14px;
  line-height: 120%;
  letter-spacing: -0.2px;
  font-family: $font-family-primary;
  font-weight: 600;
}

@mixin TextPreset5 {
  font-size: 14px;
  line-height: 120%;
  letter-spacing: -0.2px;
  font-family: $font-family-primary;
  font-weight: 400;
}

@mixin TextPreset6 {
  font-size: 12px;
  line-height: 120%;
  letter-spacing: -0.2px;
  font-family: $font-family-primary;
  font-weight: 400;
}

@mixin flex($direction: row, $justify: flex-start, $align: center, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  gap: $gap;
}

// responsive media query
@mixin respond-above($breakpoint) {
  @media (min-width: $breakpoint) {
    @content;
  }
}

@mixin respond-below($breakpoint) {
  @media (max-width: $breakpoint) {
    @content;
  }
}
